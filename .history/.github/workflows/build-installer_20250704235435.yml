name: Build DLSS-Enabler Installer

on:
  # Trigger on schedule to check for new OptiScaler releases daily
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 UTC
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      optiscaler_version:
        description: 'Specific OptiScaler version to use (e.g., v0.7.7-pre12, nightly)'
        required: false
        default: 'nightly'
      force_build:
        description: 'Force build even if no new version'
        type: boolean
        required: false
        default: false

  # Trigger on push to main branch for testing
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

env:
  OPTISCALER_REPO: optiscaler/OptiScaler
  XESS_DOWNLOAD_URL: https://github.com/intel/xess/releases/latest/download/libxess.dll

jobs:
  check-versions:
    runs-on: windows-latest
    outputs:
      should_build: ${{ steps.version_check.outputs.should_build }}
      optiscaler_version: ${{ steps.version_check.outputs.optiscaler_version }}
      optiscaler_download_url: ${{ steps.version_check.outputs.optiscaler_download_url }}
      dlss_enabler_version: ${{ steps.version_check.outputs.dlss_enabler_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check OptiScaler versions and determine if build needed
      id: version_check
      shell: powershell
      run: |
        # Function to get release info
        function Get-GitHubRelease {
            param($repo, $tag)
            $headers = @{
                'Accept' = 'application/vnd.github.v3+json'
                'User-Agent' = 'DLSS-Enabler-Bot'
            }
            if ($env:GITHUB_TOKEN) {
                $headers['Authorization'] = "token $env:GITHUB_TOKEN"
            }
            
            if ($tag -eq "nightly" -or $tag -eq "latest") {
                $url = "https://api.github.com/repos/$repo/releases"
                $releases = Invoke-RestMethod -Uri $url -Headers $headers
                if ($tag -eq "nightly") {
                    return $releases | Where-Object { $_.prerelease -eq $true -and $_.tag_name -eq "nightly" } | Select-Object -First 1
                } else {
                    return $releases | Where-Object { $_.prerelease -eq $false } | Select-Object -First 1
                }
            } else {
                $url = "https://api.github.com/repos/$repo/releases/tags/$tag"
                return Invoke-RestMethod -Uri $url -Headers $headers
            }
        }

        # Determine which version to check
        $targetVersion = "${{ github.event.inputs.optiscaler_version }}"
        if (-not $targetVersion -or $targetVersion -eq "") {
            $targetVersion = "nightly"
        }

        Write-Host "Checking OptiScaler version: $targetVersion"

        try {
            # Get OptiScaler release info
            $release = Get-GitHubRelease -repo "$env:OPTISCALER_REPO" -tag $targetVersion
            
            if (-not $release) {
                Write-Error "Could not find OptiScaler release: $targetVersion"
                exit 1
            }

            $optiVersion = $release.tag_name
            $publishedAt = $release.published_at
            Write-Host "Found OptiScaler version: $optiVersion (published: $publishedAt)"

            # Find the Windows zip file in assets
            $asset = $release.assets | Where-Object { 
                $_.name -match "OptiScaler.*\.zip$" -or $_.name -match "OptiScaler.*\.7z$" 
            } | Select-Object -First 1

            if (-not $asset) {
                Write-Error "Could not find OptiScaler zip/7z asset in release"
                exit 1
            }

            $downloadUrl = $asset.browser_download_url
            Write-Host "Download URL: $downloadUrl"

            # Check if we have built this version before
            $shouldBuild = $true
            $forceValue = "${{ github.event.inputs.force_build }}"
            
            if ($forceValue -eq "true") {
                Write-Host "Force build requested"
                $shouldBuild = $true
            } else {
                # Check if we have a release with this OptiScaler version
                try {
                    $existingReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers @{
                        'Accept' = 'application/vnd.github.v3+json'
                        'User-Agent' = 'DLSS-Enabler-Bot'
                    }
                    
                    $existingRelease = $existingReleases | Where-Object { 
                        $_.body -match "OptiScaler.*$([regex]::Escape($optiVersion))" -or
                        $_.tag_name -match $optiVersion
                    } | Select-Object -First 1

                    if ($existingRelease) {
                        Write-Host "Found existing release with OptiScaler $optiVersion - skipping build"
                        $shouldBuild = $false
                    } else {
                        Write-Host "No existing release found with OptiScaler $optiVersion - will build"
                        $shouldBuild = $true
                    }
                } catch {
                    Write-Host "Could not check existing releases, will build anyway: $($_.Exception.Message)"
                    $shouldBuild = $true
                }
            }

            # Generate DLSS Enabler version
            $timestamp = Get-Date -Format "yyyyMMdd.HHmmss"
            $dlssVersion = "3.01.$timestamp"

            # Output results
            echo "should_build=$($shouldBuild.ToString().ToLower())" >> $env:GITHUB_OUTPUT
            echo "optiscaler_version=$optiVersion" >> $env:GITHUB_OUTPUT
            echo "optiscaler_download_url=$downloadUrl" >> $env:GITHUB_OUTPUT
            echo "dlss_enabler_version=$dlssVersion" >> $env:GITHUB_OUTPUT

            Write-Host "Should build: $shouldBuild"
            Write-Host "OptiScaler version: $optiVersion"
            Write-Host "DLSS Enabler version: $dlssVersion"

        } catch {
            Write-Error "Error checking versions: $($_.Exception.Message)"
            exit 1
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-installer:
    needs: check-versions
    if: needs.check-versions.outputs.should_build == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup 7-Zip
      uses: animelover1984/setup-7zip@v1

    - name: Setup Inno Setup
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.4
      with:
        ISCC-Parameters: /O+ /DSIGNTOOL="signtool.exe sign /v /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /a $f"

    - name: Download and extract OptiScaler
      shell: powershell
      run: |
        $downloadUrl = "${{ needs.check-versions.outputs.optiscaler_download_url }}"
        $version = "${{ needs.check-versions.outputs.optiscaler_version }}"
        
        Write-Host "Downloading OptiScaler from: $downloadUrl"
        
        # Create temp directory
        $tempDir = "$env:TEMP\optiscaler"
        New-Item -ItemType Directory -Path $tempDir -Force
        
        # Download file
        $fileName = Split-Path $downloadUrl -Leaf
        $filePath = Join-Path $tempDir $fileName
        Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath
        
        Write-Host "Downloaded: $filePath"
        
        # Extract archive
        $extractDir = Join-Path $tempDir "extracted"
        New-Item -ItemType Directory -Path $extractDir -Force
        
        if ($fileName -match "\.7z$") {
            & 7z x "$filePath" "-o$extractDir" -y
        } elseif ($fileName -match "\.zip$") {
            Expand-Archive -Path $filePath -DestinationPath $extractDir -Force
        }
        
        Write-Host "Extracted to: $extractDir"
        
        # Find nvngx.dll in extracted files
        $nvngxFile = Get-ChildItem -Path $extractDir -Name "nvngx.dll" -Recurse | Select-Object -First 1
        
        if (-not $nvngxFile) {
            Write-Error "Could not find nvngx.dll in OptiScaler archive"
            Get-ChildItem -Path $extractDir -Recurse | ForEach-Object { Write-Host $_.FullName }
            exit 1
        }
        
        $nvngxPath = Join-Path $extractDir $nvngxFile
        Write-Host "Found nvngx.dll at: $nvngxPath"
        
        # Copy and rename to dlss-enabler-upscaler.dll
        $targetPath = "Dll version\dlss-enabler-upscaler.dll"
        Copy-Item -Path $nvngxPath -Destination $targetPath -Force
        
        Write-Host "Copied nvngx.dll to: $targetPath"
        
        # Verify the file
        if (Test-Path $targetPath) {
            $fileInfo = Get-Item $targetPath
            Write-Host "File size: $($fileInfo.Length) bytes"
            
            # Try to get version info
            try {
                $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($targetPath)
                Write-Host "File version: $($versionInfo.FileVersion)"
                Write-Host "Product version: $($versionInfo.ProductVersion)"
            } catch {
                Write-Host "Could not get version info: $($_.Exception.Message)"
            }
        } else {
            Write-Error "Failed to copy dlss-enabler-upscaler.dll"
            exit 1
        }

    - name: Download latest XeSS library
      shell: powershell
      run: |
        Write-Host "Downloading latest libxess.dll..."
        
        try {
            # Try to get the latest release
            $headers = @{
                'Accept' = 'application/vnd.github.v3+json'
                'User-Agent' = 'DLSS-Enabler-Bot'
            }
            
            $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/intel/xess/releases" -Headers $headers
            $latestRelease = $releases | Where-Object { $_.prerelease -eq $false } | Select-Object -First 1
            
            if ($latestRelease) {
                $asset = $latestRelease.assets | Where-Object { $_.name -eq "libxess.dll" } | Select-Object -First 1
                if ($asset) {
                    $downloadUrl = $asset.browser_download_url
                    Write-Host "Found XeSS release: $($latestRelease.tag_name)"
                } else {
                    Write-Host "No libxess.dll found in latest release, using direct URL"
                    $downloadUrl = "$env:XESS_DOWNLOAD_URL"
                }
            } else {
                Write-Host "No releases found, using direct URL"
                $downloadUrl = "$env:XESS_DOWNLOAD_URL"
            }
        } catch {
            Write-Host "Error accessing XeSS releases, using direct URL: $($_.Exception.Message)"
            $downloadUrl = "$env:XESS_DOWNLOAD_URL"
        }
        
        Write-Host "Downloading from: $downloadUrl"
        
        $targetPath = "Dll version\libxess.dll"
        
        try {
            Invoke-WebRequest -Uri $downloadUrl -OutFile $targetPath
            Write-Host "Downloaded libxess.dll successfully"
            
            # Verify file
            if (Test-Path $targetPath) {
                $fileInfo = Get-Item $targetPath
                Write-Host "File size: $($fileInfo.Length) bytes"
            }
        } catch {
            Write-Error "Failed to download libxess.dll: $($_.Exception.Message)"
            exit 1
        }

    - name: Update version in Inno Setup script
      shell: powershell
      run: |
        $version = "${{ needs.check-versions.outputs.dlss_enabler_version }}"
        $optiVersion = "${{ needs.check-versions.outputs.optiscaler_version }}"
        
        Write-Host "Updating DLSS Enabler version to: $version"
        Write-Host "OptiScaler version: $optiVersion"
        
        $issFile = "DLSS enabler.iss"
        $content = Get-Content $issFile -Raw
        
        # Update version
        $content = $content -replace '#define MyAppVersion ".*"', "#define MyAppVersion `"$version`""
        
        # Update output filename
        $outputName = "dlss-enabler-setup-$version-optiscaler-$($optiVersion -replace '[^a-zA-Z0-9.-]', '')"
        $content = $content -replace 'OutputBaseFilename=.*', "OutputBaseFilename=$outputName"
        
        # Save updated file
        Set-Content -Path $issFile -Value $content -Encoding UTF8
        
        Write-Host "Updated Inno Setup script"

    - name: Build installer with Inno Setup
      shell: powershell
      run: |
        $issFile = "DLSS enabler.iss"
        
        Write-Host "Building installer with Inno Setup..."
        Write-Host "Script: $issFile"
        
        # Use ISCC from PATH (installed by Inno Setup Action)
        $process = Start-Process -FilePath "ISCC" -ArgumentList "`"$issFile`"" -Wait -PassThru -NoNewWindow
        
        if ($process.ExitCode -ne 0) {
            Write-Error "Inno Setup compilation failed with exit code: $($process.ExitCode)"
            exit 1
        }
        
        Write-Host "Installer built successfully"
        
        # List output files
        if (Test-Path "Output") {
            Write-Host "Output directory contents:"
            Get-ChildItem "Output" | ForEach-Object { Write-Host "  $($_.Name)" }
        }

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-versions.outputs.dlss_enabler_version }}
        name: "DLSS Enabler v${{ needs.check-versions.outputs.dlss_enabler_version }} (OptiScaler ${{ needs.check-versions.outputs.optiscaler_version }})"
        body: |
          🚀 **DLSS Enabler** - Automatic build with latest OptiScaler
          
          ## 📦 What's Included
          - **OptiScaler Version**: `${{ needs.check-versions.outputs.optiscaler_version }}`
          - **XeSS Library**: Latest from Intel repository
          - **DLSSG to FSR3 Module**: Nukem9's mod (version 0.100)
          
          ## 🔧 Installation
          1. Download the installer below
          2. Run the setup and select your game directory
          3. Choose installation type based on your needs:
             - **Preferred installation (DLL package)**: Recommended for most users
             - **Experimental support**: For AMD and Intel GPUs
          
          ## 📋 Release Information
          - **Build Date**: ${{ steps.date.outputs.date }}
          - **OptiScaler**: ${{ needs.check-versions.outputs.optiscaler_version }}
          - **Auto-built**: This release was automatically generated when a new OptiScaler version was detected
          
          ## 🎮 Compatibility
          Works with any DirectX 12 game that supports DLSS2 and DLSS3 natively.
          
          ## ⚠️ Important Notes
          - For NVIDIA GPU users: Use the standard installation
          - For AMD/Intel GPU users: Select "Experimental support" during installation
          - Some antivirus software may flag the installer as false positive due to DLL injection techniques
          
          ---
          Built with OptiScaler `${{ needs.check-versions.outputs.optiscaler_version }}`
        files: Output/*.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get current date
      id: date
      run: echo "date=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> $env:GITHUB_OUTPUT
